<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<rfc ipr="full2026">
<front>
<title abbrev="SIP Event Lists">
A Session Initiation Protocol (SIP) Event
Notification Extension for Resource Lists
</title>

<author initials="A. B." surname="Roach" fullname="Adam Roach">
<organization>dynamicsoft</organization>
<address>
<postal>
<street>5100 Tennyson Pkwy</street>
<street>Suite 1200</street>
<city>Plano</city> <region>TX</region> <code>75024</code>
<country>US</country>
</postal>
<email>adam@dynamicsoft.com</email>
</address>
</author>

<author initials="J." surname="Rosenberg" fullname="Jonathan Rosenberg">
<organization>dynamicsoft</organization>
<address>
<postal>
<street>600 Lanidex Plaza</street>
<city>Parsippany</city> <region>NJ</region> <code>07054-2711</code>
<country>US</country>
</postal>
<email>jdrosen@dynamicsoft.com</email>
</address>
</author>

<author initials="B." surname="Campbell" fullname="Ben Campbell">
<organization>dynamicsoft</organization>
<address>
<postal>
<street>5100 Tennyson Pkwy</street>
<street>Suite 1200</street>
<city>Plano</city> <region>TX</region> <code>75024</code>
<country>US</country>
</postal>
<email>bcampbell@dynamicsoft.com</email>
</address>
</author>

<date month="May" year="2003" />
<area>Transport</area>

<abstract><t>
This document presents an extension to the
Session Initiation Protocol (SIP)-Specific Event Notification
mechanism for subscribing to a homogeneous list
of resources. Instead of the subscriber sending a SUBSCRIBE for
each resource individually, the subscriber can subscribe to 
an entire list, and then receive notifications when the
state of any of the resources in the list changes.
</t></abstract>
</front>


<middle>
<section title="Introduction">

<t>
   The SIP-specific event notification mechanism 
   <xref target="RFC3265" /> allows a user (the subscriber)
   to request to be notified of changes in the state of a
   particular resource. This is accomplished by having
   the subscriber generate a SUBSCRIBE request for the resource, which
   is processed by a notifier that represents the resource.
</t>

<t>
   In many cases, a subscriber has a list of resources they are
   interested in. Without some aggregating mechanism, this will require 
   the subscriber generate a SUBSCRIBE request for each resource 
   about which they want information. For environments in which
   bandwidth is limited, such as wireless networks, subscribing to
   each resource individually is problematic. Some specific problems
   are:
</t>

<list style="symbols">
<t>
        Doing so generates substantial message traffic, in the form
          of the
          initial SUBSCRIBE requests for each resource, and the
          refreshes of each individual subscription.
</t><t>
        The notifier
          may insist on low refresh intervals, in
          order to avoid long lived subscription state. This means that
          the subscriber may need to generate SUBSCRIBE
          refreshes faster than
          it would like to, or has the capacity to.
</t><t>
        The notifier may generate NOTIFY requests more rapidly
          than the subscriber desires, causing NOTIFY traffic at a
          greater volume than is desired by the subscriber.
</t>
</list>
<t>
   To solve these problems, this specification defines an
   extension to RFC 3265
   <xref target="RFC3265" />
   that allows for requesting and conveying
   notifications for lists of resources.

   A resource list is identified by a URI 
   and it
   represents a list of zero or more URIs. Each of these URIs
   is an identifier for an individual resource for which the
   subscriber wants to receive information.
   In many cases, the URI will be a SIP URI <xref target="RFC3261" />; 
   however, the use of other schemes (such as pres: <xref target="cpp" />) is
   also foreseen.
</t><t>
   The notifier for the list is called a "resource list
   server", or RLS. In order to determine the state of the entire list,
   the RLS will act as if it has generated a
   subscription to each resource in the list.
</t><t>
   The resource list is not restricted to be inside the domain
   of the subscriber. Similarly, the resources in the list
   are not constrained to be in the domain of the
   resource list server.
</t>
</section>

<section title="Terminology">
<t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119
   <xref target="RFC2119" />. 
</t>
<t>
The following terms are used throughout the remainder of this document.
</t>
<list style="hanging">
  <t hangText="Back-End Subscription:">
  Any subscription (SIP or otherwise) that an RLS creates
  to learn of the state of a resource. An RLS will create
  back-end subscriptions to learn of the state of a resource
  about which the RLS is not an authority. For back-end
  subscriptions, RLSes act as a subscriber.
  </t>
  <t hangText="List Subscription:">
  A subscription to a resource list. In list subscriptions,
  RLSes act a the notifier.
  </t>
  <t hangText="Resource:">
  A resource is any logical entity that has a state or states
  that can be subscribed to. Resources are identified by
  URIs.
  </t>
  <t hangText="Resource List:">
  A list of zero or more resources that can have their
  individual states subscribed to with a single subscription.
  </t>
  <t hangText="RLMI:">
  Resource List Meta-Information. RLMI is a document that
  describes the state of the virtual subscriptions associated
  with a list subscription.
  </t>
  <t hangText="RLS:">
  Resource List Server. RLSes accept subscriptions to resource
  lists and send notifications to update subscribers of the
  state of the resources in a resource list.
  </t>
  <t hangText="Virtual Subscription:">
  Virtual Subscriptions are a logical construct within
  an RLS that represent subscriptions to the resources
  in a resource list.
  For each list subscription it services, an RLS
  creates at least one virtual subscription for every resource
  in the resource list being subscribed to. In some cases, such
  as when the RLS is not the authority for the state of
  the resource, this virtual subscription will be associated
  with a back-end subscription. In other cases, such
  as when the RLS is the authority for the state of the resource,
  the virtual subscription will not have a corresponding
  back-end subscription.
  </t>
</list>
</section>

<section title="Overview of Operation">

<t>
   This section provides an overview of the typical mode of operation of
   this extension. It is not normative.
</t>
<t>
   When users wish to subscribe to the resource of a list of
   resources, they can use the mechanisms described in this
   specification. The first step is creation of a resource list.
   This resource list is
   represented by a SIP URI. The list contains a set of URIs, each of
   which represents a resource for which the subscriber wants
   to receive information.

   The resource list can exist in any domain.
   The list could be manipulated through a web page,
   through a voice response system, or through some other protocol.
   The specific means by which the list
   is created and maintained is outside of the scope of this
   specification.
</t>
<t>

   To learn the resource state of the set of elements on the list, the
   user sends a single SUBSCRIBE request targeted to the URI of the
   list. This will be routed to an RLS for that URI. The RLS acts as a
   notifier, authenticates the subscriber, and accepts the subscription.
</t>
<t>
   The RLS may have direct information about some or all of
   the resources specified by the list. If it does not, it
   could subscribe to any non-local resources specified by the
   list resource.
</t>
<t>
   Note that subscriptions to non-local resources may or may not
   be SIP subscriptions; any mechanism for determining
   such information may be employed. This document uses the
   term "back-end subscription" to refer to such a subscription,
   regardless of whether SIP is used to establish and service
   it.
</t>
<t>
   As the state of resources in the list change, the RLS
   generates notifications to the list subscribers. 
   The RLS can, at its discretion, buffer
   notifications of resource changes, and send the resource
   information to the subscriber in batches, rather than
   individually. This allows the
   RLS to provide rate limiting for the subscriber.
</t>
<t>
   The list notifications contain a body of type multipart/related.
   The root section of the multipart/related content is
   an XML document that provides meta-information about each
   resource present in the list. The remaining sections contain
   the actual state information for each resource.
</t>
</section>

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

<section title="Operation of List Subscriptions">
<t>
The event list extension acts, in many ways, like
an event template package. In particular, any single list
subscription must be homogeneous with respect to
the underlying event package. In other words,
a single list subscription can apply only one
event package to all of the resources in the resource
list. 
</t>
<t>
It is worth noting that it is perfectly valid,
for an RLS to allow
multiple subscriptions to the same list to use
differing event packages.
</t>
<t>
The key difference between a list
subscription and templates in general is that
support for list subscriptions indicates support
for arbitrary nesting of list subscriptions. In other
words, elements within the list may be atomic elements,
or they may be lists themselves.
</t>
<t>
The consequence of this is that subscription to a
URI that represents a list actually results
in a several virtual subscriptions to a tree of resources.
The leaf nodes of this tree are virtual subscriptions
of the event type given in the "Event" header field; all
other nodes in the tree are list subscriptions
that are serviced as described in this section
and its subsections.
</t>
<t>
It is important to keep in mind that these virtual
subscriptions are not literal SIP subscriptions
(although they may result in SIP subscriptions,
depending on the RLS implementation).
</t>

<section title="Negotiation of Support for Resource Lists">
<t>
This specification uses the SIP option tag mechanism for negotiating
support for the extension defined herein. Refer to RFC3261
<xref target="RFC3261" />
for the normative description of processing of the "Supported"
and "Require" header fields and the 421 (Extension Required)
response code.
</t>
<list style="empty">
<t>
A non-normative description of the implications
of the use of option tags follows.
</t>
<t>
Any client that supports the event list extension will
include an option tag of "eventlist" in a "Supported"
header field of every SUBSCRIBE message for a subscription
for which it is willing to process a list.

If the subscription is made to a URI that represents a list,
the RLS will include "eventlist" in a "Require" header field
of the response to the SUBSCRIBE, and in all NOTIFY
messages within that subscription.
</t>
<t>
  Use of "Require: eventlist" in NOTIFY messages
  is applied by the notifier to satisfy the RFC3261
  requirement that a UAC MUST insert a Require header
  field into a request if the UAC wishes to insist
  that a UAS understand an extension in order to
  process the request. Because the NOTIFY would not
  be usable without applying the eventlist option,
  the notifier is obligated to include it.
</t>
</list>
<t>
Including "eventlist" in a "Require" header field
in a SUBSCRIBE request serves no purpose, and is
consequently NOT RECOMMENDED.
</t>
<t>
 There is nothing in a SIP URI which indicates whether it 
 represents a 
 list of resources or a single resource. Therefore, if a 
 subscriber sends 
 a request to a URI that represents a list resource, but does 
 not include 
 a Supported header field listing the "eventlist" token, the notifier 
 will typically return a 421 (Extension Required) response 
 code. RFC 3261 
 <xref target="RFC3261" />
 advises servers to avoid returning a 421, and instead, attempt to 
 process the request without the extension. However, in this case, the 
 URI fundamentally represents a list resource, and therefore, the 
 subscription cannot proceed without this extension.
</t>

</section>

<section title="Subscription Duration">
<t>
   Since the primary benefit of the resource list server is to reduce the
   overall messaging volume to a subscriber, it is RECOMMENDED that the
   subscription duration to a list be reasonably long.
   The default,
   when no duration is specified, is taken from the underlying
   event package.
   Of course, the standard techniques
   <xref target="RFC3265" /> can be
   used to increase or reduce this amount.
</t>

</section>
<section title="NOTIFY Bodies">

<t>
   An implementation compliant to this specification MUST support the
   multipart/related and application/rlmi+xml MIME types.  These types
   MUST be included in an Accept header sent in SUBSCRIBE message, in
   addition to any other types supported by the client (including
   any types required by the event package being used).
</t>

</section>
<section title="RLS Processing of SUBSCRIBE Requests">
<t>
   Once the subscriber is authenticated,
   the RLS performs authorization per its local policy.
   In many cases,
   each resource list is associated with a particular user (the one who
   created it and manages the set of elements in it), and only that user
   will be allowed to subscribe. Of course, this mode of operation
   is not inherent in the use of resource lists, and an RLS can
   use any authorization policy it chooses.
</t>
</section>

<section title="RLS Generation of NOTIFY requests">
<t>
   This specification leaves the choice about how and when to generate
   NOTIFY requests at the discretion of the implementor. One of the
   value propositions of the RLS is the means by which it aggregates,
   rate limits, or optimizes the way in which notifications are
   generated.
   As a baseline behavior, 
   the RLS MAY generate a
   NOTIFY to the RLS subscriber whenever the
   state of any resource on the list changes.
</t>

<t>
   See <xref target="multipart" /> for a detailed definition
   of the
   syntax used to convey the state of resource lists. For the purposes of
   the following discussion, it is important to know that
   the overall list contains zero or more resources,
   and that the resources contains zero or more instances.
   Each instance has a state associated with it (pending, active,
   or terminating), representing the state of the
   virtual subscription.
</t>

<t>
  Notifications contain a multipart document, the first
  part of which always contains meta-information about the list
  (e.g. membership, state of the virtual subscription
  to the resource). Remaining parts are used to convey
  the actual state of the resources listed in the meta-information.
</t>
<t>
  The "state" attribute of each instance of a resource
  in the meta-information is set according to the
  state of the virtual subscription. The meanings
  of the "state" attribute are described in 
  RFC 3265 <xref target="RFC3265" />. 
</t>
<t>
  If an instance of a resource was previously
  reported to the subscriber but is no longer
  available (i.e. the virtual subscription 
  to that instance has been terminated), 
  the resource list server SHOULD include
  that resource instance in the meta-information in
  the first NOTIFY message sent to the subscriber
  following the instance's unavailability.
  The RLS MAY continue to do so for future notifications.
</t>
<t>
  When sending information for a terminated resource
  instance, the RLS indicates a
  state of "terminated" and an appropriate reason
  value. Valid reason values and their
  meanings are described in 
  RFC 3265 <xref target="RFC3265" />. 
  If the RLS will attempt to recover the resource
  state again at some point
  in the future (e.g. when the reason in the meta-information
  is "probation"), then the instance of the resource
  SHOULD remain in the meta-information until
  the instance state is available, or until the
  RLS gives up on making such state available.
</t>

<t>
   When the first SUBSCRIBE message for a particular subscription
   is received by a RLS, the RLS
   will often not
   know state information for all of the resources specified by
   the resource list. For any resource for which state
   information is not known, 
   the corresponding "uri" attribute will be set appropriately,
   and no &lt;instance> elements will be present for the resource.
</t>
<t>
   For an initial notification, sections corresponding to
   resources for which the RLS
   does have state will be populated with appropriate
   data (subject, of course, to local policy decisions). This
   will often occur if the resource list server is co-located with
   the server for one or more of the resources specified on the list.
</t>
<t>
   Immediate notifications triggered as a result of subsequent SUBSCRIBE
   messages SHOULD include an RLMI document with full state indicated.
   The RLS SHOULD also include
   state information for all resources in the list
   for which the RLS has state, subject to policy restrictions.
   This allows the subscriber to refresh their state, and to
   recover from lost notifications.
</t>
</section>

<section title="Subscriber Processing of NOTIFY Requests">
<t>
   Notifications for a resource list can convey information
   about a subset of the list elements.
   This means that an explicit
   algorithm needs to be defined in order to construct coherent and
   consistent state.
</t><t>
   The XML document present in the root of the multipart/related
   document contains a &lt;resource> element for some or
   all of the resources
   in the list. Each &lt;resource> element contains
   a URI which uniquely identifies the resource
   to which that section corresponds. 

   When a NOTIFY arrives, it can contain full or partial
   state (as indicate by the "fullState" attribute of
   the top-level &lt;list> element).
   If full state is indicated, then the recipient replaces
   all state associated with the list with the entities
   in the NOTIFY body.

   If full state is not indicated,
   the recipient of the NOTIFY updates information for each
   identified resource. 
   Information for any resources that are not identified
   in the NOTIFY are not changed, even if they were indicated
   in previous NOTIFY messages. 
   See <xref target="composite" /> for more information.
</t>
<list style="empty">
<t>
   When full state is indicated, note that it applies
   only to the RLMI document in which it occurs. In particular,
   one of the &lt;resource> elements in the document may
   in turn refer to another list of resources. Any such
   sub-lists will be detailed in their own RLMI documents,
   which may or may not have full state indicated.
</t>
<t>
   Further note that underlying event package 
   may have its own rules for compositing
   partial state notification. When processing data related
   to those packages, their rules apply (i.e. the fact that
   they were reported as part of a list does not change
   their partial notification semantics).
</t>
<t>
   Finally, note that a consequence of the way in which
   resource list
   subscriptions work is that polling of resource state may
   not be particularly useful. While such polls will retrieve
   the resource list, they will not necessarily contain state
   for some or all of the resources on the list.
</t>
</list>
</section>

<section title="Handling of Forked Requests">
<t>
   Forking makes little sense with subscriptions to event lists,
   since the whole idea is a centralization of the source of notifications.

   Therefore, a subscriber to a list MUST NOT install multiple
   subscriptions when the initial request is forked.
   If multiple responses are received, they are
   handled using the techniques
   described in section 4.4.9 of RFC 3265<xref target="RFC3265" />.
</t>

</section>
<section title="Rate of Notifications">

<t>
   One potential role of the RLS is to perform rate limitations on
   behalf of the subscriber. As such, this specification does not
   mandate any particular rate limitation, and rather leaves that to the
   discretion of the implementation.
</t>

</section>
</section>

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<section title="Using multipart/related to Convey Aggregate State" anchor="multipart">

<t>In order to convey the state of multiple resources, the
list extension uses the "multipart/related" mime type.
The syntax for multipart/related is defined in 
"The MIME Multipart/Related Content-type"
<xref target="RFC2387" />.</t>

<section title="XML Syntax">
<t>
The root document of the multipart/related body
MUST be a Resource List Meta-Information
(RLMI) document. It is of type "application/rlmi+xml".
This document contains the meta-information for the resources
contained in the notification. The schema for this
XML document is given below.
</t>

<figure>
<artwork>
<![CDATA[
<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema targetNamespace="urn:ietf:params:xml:ns:rlmi" 
           elementFormDefault="qualified" 
           xmlns="urn:ietf:params:xml:ns:rlmi" 
           xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="list">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="resource" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="uri" type="xs:anyURI" use="required" />
      <xs:attribute name="version" type="xs:unsignedInt" use="required" />
      <xs:attribute name="fullState" type="xs:boolean" use="required" />
      <xs:attribute name="name" type="xs:string" use="optional" />
      <xs:attribute name="cid" type="xs:string" use="optional" />
      <xs:anyAttribute />
    </xs:complexType>
  </xs:element>
  <xs:element name="resource">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="instance" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="uri" type="xs:anyURI" use="required" />
      <xs:attribute name="name" type="xs:string" use="optional" />
      <xs:anyAttribute />
    </xs:complexType>
  </xs:element>
  <xs:element name="instance">
    <xs:complexType>
      <xs:sequence>
        <xs:any minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="id" type="xs:string" use="required" />
      <xs:attribute name="state" type="xs:string" use="required" />
      <xs:attribute name="reason" type="xs:string" use="optional" />
      <xs:attribute name="cid" type="xs:string use="optional" />
      <xs:anyAttribute />
    </xs:complexType>
  </xs:element>
</xs:schema>

]]></artwork>
</figure>

<t>An example of a document formatted using this schema follows.</t>
<figure>
<artwork>
<![CDATA[
<?xml version="1.0"?>
<list xmlns="urn:ietf:params:xml:ns:rmli"
      uri="sip:adam-friends@lists.example.com" version="7"
      name="Buddy List" fullState="true">
  <resource uri="sip:bob@example.com" name="Bob Smith">
    <instance id="juwigmtboe" state="active" cid="12345.aaa@example.com"/>
  </resource>
  <resource uri="sip:dave@example.com" name="Dave Jones">
    <instance id="hqzsuxtfyq" state="active" cid="12345.aab@example.com"/>
  </resource>
  <resource uri="sip:jim@example.com" name="Jim">
    <instance id="oflzxqzuvg" state="terminated" reason="rejected" />
  </resource>
  <resource uri="sip:ed@example.com" name="Ed">
    <instance id="grqhzsppxb" state="pending"/>
  </resource>
</list>
]]></artwork>
</figure>
</section>

<section title="List Attributes">
<t>The &lt;list> element present in a list notification
MUST contain three attributes.</t>

<t>The first mandatory &lt;list> attribute is "uri", 
which contains the uri that corresponds to the list.
Typically, this is the URI to which the SUBSCRIBE
request was sent.</t>
<t>The second mandatory &lt;list> attribute is "version", 
which contains a number from 0 to 2^32-1. This version
number MUST be 0 for the first NOTIFY message sent within
a subscription,
and MUST increase by exactly one for each subsequent NOTIFY sent
within a subscription.</t>
<t>The third mandatory attribute is "fullState".
The "fullState" attribute indicates whether the NOTIFY
message contains information for every resource in
the list. If it
does, the value of the attribute is "true" (or "1");
otherwise, it is "false" (or "0"). The first
NOTIFY sent in a subscription MUST contain full state,
as must the first NOTIFY sent after receipt of a SUBSCRIBE
request for the subscription.</t>
<t>
The optional "name" attribute contains a human
readable description or name for the resource list.
This attribute is somewhat analogous to the
"Display Name" present in the SIP name-addr element.
</t>
<t>
Finally, &lt;list> elements MAY contain a "cid"
attribute. If present, the "cid" attribute
identifies a section
within the multipart/related body that contains
aggregate state information for the resources
contained in the list. The definition of such
aggregate information is outside the scope of
this document, and will be defined on a per-package
basis as needed.  The cid attribute is the Content-ID 
for the corresponding section in the multipart body.
</t>
<t>
The cid attribute MUST refer only to top-level
parts of the multipart/related document for
which the RLMI document in which it appears is the
root.
See <xref target="instance" /> for an example.
</t>
</section>

<section title="Resource Attributes">
<t>The resource list contains one &lt;resource> element
for each resource being reported in the notification.
These resource elements contain attributes that identify
meta-data associated with each resource.
</t>

<t>The "uri" attribute identifies the resource to which
the &lt;resource> element corresponds. Typically,
this will be a SIP URI which, if subscribed to,
would return the state of the resource. This attribute
MUST be present.
</t>

<t>
The optional "name" attribute can contain a human
readable description or name for the resource.
This attribute is somewhat analogous to the
"Display Name" present in the SIP name-addr element.
</t>
</section>

<section title="Instance Attributes" anchor="instance">
<t>
Each resource element contains zero or more
instance elements. These instance elements
are used to represent a single notifier for
the resource. For event packages that allow
forking, multiple virtual subscriptions 
may exist for a given resource. Multiple
virtual subscriptions are represented
as multiple instance elements in the
corresponding resource element. For subscriptions
in which forking does not occur, at most
one instance will be present for a given resource.
</t>

<t>The "id" attribute contains an opaque string
used to uniquely identify the instance of the
resource.
The "id" attribute is unique only within
the context of a resource.
Construction of this string is an
implementation decision.
Any mechanism for generating
this string is valid, as long as
uniqueness within the resource is assured.
</t>

<t>The "state" attribute contains the
subscription state for the identified instance
of the resource.
This attribute contains one of the values
"active", "pending", or "terminated".
The meanings for these values
are as defined for the
"Subscription-State" header field in
RFC 3265 <xref target="RFC3265" />.
</t>

<t>If the "state" attribute indicates "terminated",
then a "reason" attribute MUST also be present.
This "reason" attribute has the same values and
meanings as given for the "reason" parameter on
the "Subscription-State" header field in 
RFC 3265 <xref target="RFC3265" />.
Note that the "reason" attribute is included for informational
purposes; the list subscriber is not expected to
take any automated actions based on the reason value.
</t>


<t>
Finally, the "cid" attribute, which MUST be present
if the "state" attribute is "active", identifies the section
within the multipart/related body that contains the
actual resource state.  This state is expressed
in the content type defined by the event package for
conveying state.
The cid attribute is the Content-ID 
for the corresponding section in the multipart body.
</t>
<t>
The cid attribute MUST refer only to top-level
parts of the multipart/related document for
which the RLMI document in which it appears is the
root.
</t>
<list style="empty">
<t>
For example, consider a multipart/related
document containing three parts; we'll label
these parts A, B, and C. Part A is type
application/rlmi+xml, part B is
type multipart/related, and part C is
type application/cpim-pidf+xml. Part B is
in turn a document containing three parts:
D, E, and F. Part D is of type
application/rlmi+xml, and parts E and F
are of type application/cpim-pidf+xml.
</t>
<figure><artwork><![CDATA[
    +-------------------------------------------+
    | Top Level Document: multipart/related     |
    |                                           |
    | +---------------------------------------+ |
    | | Part A: application/rlmi+xml          | |
    | +---------------------------------------+ |
    | | Part B: multipart/related             | |
    | |                                       | |
    | | +-----------------------------------+ | |
    | | | Part D: application/rlmi+xml      | | |
    | | +-----------------------------------+ | |
    | | | Part E: application/cpim-pidf+xml | | |
    | | +-----------------------------------+ | |
    | | | Part F: application/cpim-pidf+xml | | |
    | | +-----------------------------------+ | |
    | |                                       | |
    | +---------------------------------------+ |
    | | Part C: application/cpim-pidf+xml     | |
    | +---------------------------------------+ |
    |                                           |
    +-------------------------------------------+
]]></artwork></figure>
<t>
Any "cid" attributes in document A must
refer only to parts B or C.  Referring
to parts D, E, or F would be illegal.
Similarly, 
Any "cid" attributes in document D must
refer only to parts E or F. Referring to
any other parts would be illegal.
</t>

<t>
Also note that the subscription durations of any
back-end subscriptions are not propagated into
the meta-information state in any way.
</t>
</list>

</section>

<section title="Constructing Coherent Resource State" anchor="composite">
<t>
   The resource list subscriber maintains a table for each resource
   list. The table contains a row for each resource in the resource
   list. Each row is indexed by the URI for that resource. That URI is
   obtained from the "uri" attribute on each &lt;resource> element.
   The
   contents of each row contain the state of that resource as conveyed
   in the resource document. 
</t><t>
   For resources that provide versioning information (which is
   mandated by <xref target="RFC3265" /> for any formats
   that allow partial notification), each row also contains
   a resource state version number.
   The version number of the row is initialized with the version
   specified in the first document received, as defined by the
   corresponding event package. This value is used when
   comparing versions of partial notifications for a resource.
</t>
<t>
   The processing of the resource list notification depends on whether it
   contains full or partial state. 
</t>
<section title="Processing Full State Notifications">
<t>
   If a notification contains full state, 
   indicated by the value of the &lt;list> attribute "fullState",
   the notification is used to update the table.
   A check is first made to ensure that the "version" attribute
   of the &lt;list> attribute in the received message is greater
   than the local version number. If not, the received document
   is discarded without any further processing.
   Otherwise, the contents of the resource-list table are flushed,
   and repopulated from the contents of the document. A new
   row in the table is created for each "resource" element.
</t>
</section>
<section title="Processing Partial State Notifications">
<t>
   If a notification contains partial state, 
   indicated by the value of the &lt;list> attribute "fullState",
   a check is made to ensure that no list notifications
   have been lost.  The value of
   the local version number (the "version" attribute of the
   &lt;list> element)
   is compared to the version number of
   the new document.
</t>
<list style="symbols">
<t>
   If the value in the new document is exactly one
   higher than the local version number, the local version number is
   increased by one, and the document is processed, as described
   below. 
</t>
<t>
   If the version in the
   document is more than one higher than the local version number, the
   local version number is set to the value in the new document, and the
   document is processed as described below. 
   Further, if the notification does not
   contain full state (as indicated by the "fullState" attribute
   of the &lt;list> element), the list subscriber SHOULD generate
   a refresh request to trigger a full state notification. 
</t>
<t>
   If the version
   in the document is less than or equal to
   the local version, the document is
   discarded without any further processing.
</t>
</list>
<t>
   For each resource listed in the document, the subscriber
   checks to see whether a row exists for that resource. This check is
   done by comparing the Resource-URI value
   with the URI associated with the row. If the resource
   doesn't exist in the table, a row is added, and its state is set to
   the information from that "resource" element. If the resource does
   exist, its state is updated to be the information from that
   "resource" element, as described in the definition
   of the event package. If a row is updated or
   created such that its
   state is now "terminated," that entry MAY be removed from the table at
   any time.
</t>
</section>

</section>
</section>

<section title="Example">

<t>
This section gives an example call flow.  It is not normative.
If a conflict arises between this call flow and the normative
behavior described in this or any other document, the normative
descriptions are to be followed.
</t>
<t>
In this particular example,
we request a subscription to a nested presence list. The
subscriber's address-of-record is "sip:adam@example.com", and
the name of the nested list resource that we are subscribing to
is called "sip:adam-buddies@pres.example.com". The underlying
event package is "presence", described by
<xref target ="presence" />.
</t>
<t>
In this example, the RLS has information to
service some of the resources on the list, but must
consult other servers to retrieve information for others.
The implementation of the RLS in this example uses
the SIP SUBSCRIBE/NOTIFY mechanism to retrieve such
information.
</t>

<figure><artwork><![CDATA[
Terminal   pres.example.com                  pres.example.org
  |                |        pres.example.net         |
1 |---SUBSCRIBE--->|                |                |
2 |<-----200-------|                |                |
3 |<----NOTIFY-----|                |                |
4 |------200------>|                |                |
5 |                |---SUBSCRIBE--->|                |
6 |                |<-----200-------|                |
7 |                |<----NOTIFY-----|                |
8 |                |------200------>|                |
9 |                |------------SUBSCRIBE----------->|
10|                |<--------------200---------------|
11|                |<-------------NOTIFY-------------|
12|                |---------------200-------------->|
13|<----NOTIFY-----|                |                |
14|------200------>|                |                |
]]></artwork></figure>

<list style="numbers">
<t>
We initiate the subscription by sending a SUBSCRIBE message
to our local RLS. (There is no reason that the RLS we
contact has to be in our domain, of course). Note that
we must advertise support for application/rlmi+xml
and multipart/related because we support the eventlist
extension, and we must advertise application/cpim-pidf+xml
because we are requesting a subscription to presence.
</t>

<figure><artwork><![CDATA[
Terminal -> Local RLS

SUBSCRIBE sip:adam-buddies@pres.example.com SIP/2.0
Via: SIP/2.0/TCP terminal.example.com;branch=z9hG4bKwYb6QREiCL
Max-Forwards: 70
To: <sip:adam-buddies@pres.example.com>
From: <sip:adam@example.com>;tag=ie4hbb8t
Call-ID: cdB34qLToC@terminal.example.com
CSeq: 322723822 SUBSCRIBE
Contact: <sip:terminal.example.com>
Event: presence
Expires: 7200
Supported: eventlist
Accept: application/cpim-pidf+xml
Accept: application/rlmi+xml
Accept: multipart/related
Accept: multipart/signed
Accept: multipart/encrypted
Content-Length: 0


]]></artwork></figure>

<t>
The Local RLS completes the SUBSCRIBE transaction.
Note that authentication and authorization would
normally take place at this point in the call flow.
Those steps are omitted for brevity.
</t>

<figure><artwork><![CDATA[
Local RLS -> Terminal

SIP/2.0 200 OK
Via: SIP/2.0/TCP terminal.example.com;branch=z9hG4bKwYb6QREiCL
To: <sip:adam-buddies@pres.example.com>;tag=zpNctbZq
From: <sip:adam@example.com>;tag=ie4hbb8t
Call-ID: cdB34qLToC@terminal.example.com
CSeq: 322723822 SUBSCRIBE
Contact: <sip:pres.example.com>
Expires: 7200
Require: eventlist
Content-Length: 0


]]></artwork></figure>

<t>
As is required by RFC 3265 <xref target="RFC3265" />,
the RLS sends a NOTIFY immediately upon accepting
the subscription. 
In this example, we are assuming
that the local RLS is also an authority for presence
information for the users in the "example.com" domain.
The NOTIFY contains an RLMI document describing the
entire buddy list (initial notifies require full
state), as well as presence information for the users
about which it already knows.
Note that, since the RLS has not yet retrieved
information for some of the entries on the list,
those &lt;resource> elements contain no &lt;instance>
elements.
</t>


<figure><artwork><![CDATA[
Local RLS -> Terminal

NOTIFY sip:terminal.example.com SIP/2.0
Via: SIP/2.0/TCP pres.example.com;branch=z9hG4bKMgRenTETmm
Max-Forwards: 70
From: <sip:adam-buddies@pres.example.com>;tag=zpNctbZq
To: <sip:adam@example.com>;tag=ie4hbb8t
Call-ID: cdB34qLToC@terminal.example.com
CSeq: 997935768 NOTIFY
Contact: <sip:pres.example.com>
Event: presence
Subscription-State: active;expires=7200
Require: eventlist
Content-Type: multipart/related;type="application/rlmi+xml";
    start="<nXYxAE@pres.example.com>";boundary="50UBfW7LSCVLtggUPe5z"
Content-Length: 1560

--50UBfW7LSCVLtggUPe5z
Content-Transfer-Encoding: 8bit
Content-ID: <nXYxAE@pres.example.com>
Content-Type: application/rlmi+xml;charset="UTF-8"

<?xml version="1.0" encoding="UTF-8"?>
<list xmlns="urn:ietf:params:xml:ns:rmli"
      uri="sip:adam-friends@pres.example.com" version="1"
      name="Buddy List at COM" fullState="true">
  <resource uri="sip:bob@example.com" name="Bob Smith">
    <instance id="juwigmtboe" state="active" cid="bUZBsM@pres.example.com"/>
  </resource>
  <resource uri="sip:dave@example.com" name="Dave Jones">
    <instance id="hqzsuxtfyq" state="active" cid="ZvSvkz@pres.example.com"/>
  </resource>
  <resource uri="sip:ed@example.net" name="Ed at NET" />
  <resource uri="sip:adam-friends@example.org" name="My Friends at ORG" />
</list>

--50UBfW7LSCVLtggUPe5z
Content-Transfer-Encoding: 8bit
Content-ID: <bUZBsM@pres.example.com>
Content-Type: application/cpim-pidf+xml;charset="UTF-8"

<?xml version="1.0" encoding="UTF-8"?>
<presence xmlns="urn:ietf:params:xml:ns:cpim-pidf"
    entity="sip:bob@example.com">
  <tuple id="sg89ae">
    <status>
      <basic>open</basic>
    </status>
    <contact priority="1.0">sip:bob@example.com</contact>
  </tuple>
</presence>

--50UBfW7LSCVLtggUPe5z
Content-Transfer-Encoding: 8bit
Content-ID: <ZvSvkz@pres.example.com>
Content-Type: application/cpim-pidf+xml;charset="UTF-8"

<?xml version="1.0" encoding="UTF-8"?>
<presence xmlns="urn:ietf:params:xml:ns:cpim-pidf"
    entity="sip:dave@example.com">
  <tuple id="slie74">
    <status>
      <basic>closed</basic>
    </status>
  </tuple>
</presence>

--50UBfW7LSCVLtggUPe5z--


]]></artwork></figure>

<t>
The terminal completes the transaction.
</t>

<figure><artwork><![CDATA[
Terminal -> Local RLS

SIP/2.0 200 OK
Via: SIP/2.0/TCP pres.example.com;branch=z9hG4bKMgRenTETmm
From: <sip:adam-buddies@pres.example.com>;tag=zpNctbZq
To: <sip:adam@example.com>;tag=ie4hbb8t
Call-ID: cdB34qLToC@terminal.example.com
CSeq: 997935768 NOTIFY
Contact: <sip:terminal.example.com>
Content-Length: 0


]]></artwork></figure>

<t>
In order to service the subscription, the local RLS subscribes
to the state of the resources. In this step, the RLS
attempts to subscribe to the presence state of the
resource "sip:ed@example.net". Since the local RLS
knows how to receive notifications for list subscriptions,
it includes the "Supported: eventlist" header field in
its request.
Although the linkage between
this subscription and the one sent by the terminal is
left up to the application, this message demonstrates
some reasonable behavior by including "Accept" header fields
for all of the body types it knows the subscriber (Terminal)
supports. This is safe to do, since the local RLS will
only pass these formats through to the subscriber, and
does not need to actually understand them.
</t>

<figure><artwork><![CDATA[
Local RLS -> Presence Server in example.net

SUBSCRIBE sip:ed@example.net SIP/2.0
Via: SIP/2.0/TCP pres.example.com;branch=z9hG4bKMEyGjdG1LH
Max-Forwards: 70
To: <sip:ed@example.net>
From: <sip:pres.example.com>;tag=aM5icQu9
Call-ID: Ugwz5ARxNw@pres.example.com
CSeq: 870936068 SUBSCRIBE
Contact: <sip:pres.example.com>
Event: presence
Expires: 3600
Supported: eventlist
Accept: application/cpim-pidf+xml
Accept: application/rlmi+xml
Accept: multipart/related
Accept: multipart/signed
Accept: multipart/encrypted
Content-Length: 0


]]></artwork></figure>

<t>
The Presence Server in example.net completes the SUBSCRIBE transaction.
Note that authentication would
normally take place at this point in the call flow.
Those steps are omitted for brevity.
</t>

<figure><artwork><![CDATA[
Presence Server in example.net -> Local RLS

SIP/2.0 200 OK
Via: SIP/2.0/TCP pres.example.com;branch=z9hG4bKMEyGjdG1LH
To: <sip:ed@example.net>;tag=e45TmHTh
From: <sip:pres.example.com>;tag=aM5icQu9
Call-ID: Ugwz5ARxNw@pres.example.com
CSeq: 870936068 SUBSCRIBE
Contact: <sip:example.net>
Expires: 3600
Content-Length: 0


]]></artwork></figure>

<t>
In this example, we assume that the server at example.net
doesn't have enough authorization information to reject
or accept our subscription. The initial notify, therefore,
contains a "Subscription-State" of "pending". Presumably,
the party responsible for accepting or denying authorization 
for the resource is notified of this change; however,
those steps are not included in this call flow for brevity.
</t>

<figure><artwork><![CDATA[
Presence Server in example.net -> Local RLS

NOTIFY sip:pres.example.com SIP/2.0
Via: SIP/2.0/TCP pres.example.net;branch=z9hG4bKfwpklPxmrW
Max-Forwards: 70
From: <sip:ed@example.net>;tag=e45TmHTh
To: <sip:pres.example.com>;tag=aM5icQu9
Call-ID: Ugwz5ARxNw@pres.example.com
CSeq: 1002640632 NOTIFY
Contact: <sip:example.net>
Subscription-State: pending;expires=3600
Event: presence
Require: eventlist
Content-Length: 0


]]></artwork></figure>

<t>
The local RLS completes the NOTIFY transaction. Note that,
at this point, the Local RLS has new information to
report to the subscriber. Whether it chooses to report
the information immediately or spool it up for later
delivery is completely up to the application. For
this example, we assume that the RLS will wait
for a short period of time before doing so, in order to
allow the subscriptions it sent out sufficient time to
provide useful data.
</t>

<figure><artwork><![CDATA[
Local RLS -> Presence Server in example.net

SIP/2.0 200 OK
Via: SIP/2.0/TCP pres.example.net;branch=z9hG4bKfwpklPxmrW
From: <sip:ed@example.net>;tag=e45TmHTh
To: <sip:pres.example.com>;tag=aM5icQu9
Call-ID: Ugwz5ARxNw@pres.example.com
CSeq: 1002640632 NOTIFY
Contact: <sip:pres.example.com>
Content-Length: 0


]]></artwork></figure>

<t>
The Local RLS subscribes to the state of
the other non-local resource.
</t>

<figure><artwork><![CDATA[
Local RLS -> RLS in example.org

SUBSCRIBE sip:adam-friends@example.org SIP/2.0
Via: SIP/2.0/TCP pres.example.com;branch=z9hG4bKFSrAF8CZFL
Max-Forwards: 70
To: <sip:adam-friends@example.org>
From: <sip:pres.example.com>;tag=a12eztNf
Call-ID: kBq5XhtZLN@pres.example.com
CSeq: 980774491 SUBSCRIBE
Contact: <sip:pres.example.com>
Event: presence
Expires: 3600
Supported: eventlist
Accept: application/cpim-pidf+xml
Accept: application/rlmi+xml
Accept: multipart/related
Accept: multipart/signed
Accept: multipart/encrypted
Content-Length: 0


]]></artwork></figure>

<t>
The RLS in example.org completes the SUBSCRIBE transaction.
Note that authentication and would
normally take place at this point in the call flow.
Those steps are omitted for brevity.
</t>

<figure><artwork><![CDATA[
RLS in example.org -> Local RLS

SIP/2.0 200 OK
Via: SIP/2.0/TCP pres.example.com;branch=z9hG4bKFSrAF8CZFL
To: <sip:adam-friends@example.org>;tag=JenZ40P3
From: <sip:pres.example.com>;tag=a12eztNf
Call-ID: kBq5XhtZLN@pres.example.com
CSeq: 980774491 SUBSCRIBE
Contact: <sip:example.org>
Expires: 3600
Content-Length: 0


]]></artwork></figure>

<t>
In this example, we are assuming
that the RLS in example.org is also an authority for presence
information for the users in the "example.org" domain.
The NOTIFY contains an RLMI document describing the
contained buddy list, as well as presence information
for those users. In this particular case, the RLS in
example.org has chosen to sign 
<xref target="RFC2633" />
the body of the
NOTIFY message.
  As described in RFC 2633, signing is performed
  by creating a multipart/signed document which
  has two parts. The first part is the document
  to be signed (in this example, the multipart/related
  document that describes the list resource states),
  while the second part is the actual signature.
</t>

<figure><artwork><![CDATA[
RLS in example.org -> Local RLS

NOTIFY sip:pres.example.com SIP/2.0
Via: SIP/2.0/TCP pres.example.org;branch=z9hG4bKmGL1nyZfQI
Max-Forwards: 70
From: <sip:adam-friends@example.org>;tag=JenZ40P3
To: <sip:pres.example.com>;tag=a12eztNf
Call-ID: kBq5XhtZLN@pres.example.com
CSeq: 294444656 NOTIFY
Contact: <sip:example.org>
Event: presence
Subscription-State: active;expires=3600
Require: eventlist
Content-Type: multipart/signed;protocol="application/pkcs7-signature";
    micalg=sha1;boundary="l3WMZaaL8NpQWGnQ4mlU"
Content-Length: 2038

--l3WMZaaL8NpQWGnQ4mlU
Content-Transfer-Encoding: 8bit
Content-ID: <ZPvJHL@example.org>
Content-Type: multipart/related;type="application/rlmi+xml";
    start="<Cvjpeo@example.org>";boundary="tuLLl3lDyPZX0GMr2YOo"

--tuLLl3lDyPZX0GMr2YOo
Content-Transfer-Encoding: 8bit
Content-ID: <Cvjpeo@example.org>
Content-Type: application/rlmi+xml;charset="UTF-8"

<?xml version="1.0" encoding="UTF-8"?>
<list xmlns="urn:ietf:params:xml:ns:rmli"
      uri="sip:adam-friends@example.org" version="1"
      name="Buddy List at ORG" fullState="true">
  <resource uri="sip:joe@example.org" name="Joe Thomas">
    <instance id="1" state="active" cid="mrEakg@example.org"/>
  </resource>
  <resource uri="sip:mark@example.org" name="Mark Edwards">
    <instance id="1" state="active" cid="KKMDmv@example.org"/>
  </resource>
</list>

--tuLLl3lDyPZX0GMr2YOo
Content-Transfer-Encoding: 8bit
Content-ID: <mrEakg@example.org>
Content-Type: application/cpim-pidf+xml;charset="UTF-8"

<?xml version="1.0" encoding="UTF-8"?>
<presence xmlns="urn:ietf:params:xml:ns:cpim-pidf"
    entity="sip:joe@example.org">
  <tuple id="7823a4">
    <status>
      <basic>open</basic>
    </status>
    <contact priority="1.0">sip:joe@example.org</contact>
  </tuple>
</presence>

--tuLLl3lDyPZX0GMr2YOo
Content-Transfer-Encoding: 8bit
Content-ID: <KKMDmv@example.org>
Content-Type: application/cpim-pidf+xml;charset="UTF-8"

<?xml version="1.0" encoding="UTF-8"?>
<presence xmlns="urn:ietf:params:xml:ns:cpim-pidf"
    entity="sip:mark@example.org">
  <tuple id="398075">
    <status>
      <basic>closed</basic>
    </status>
  </tuple>
</presence>

--tuLLl3lDyPZX0GMr2YOo--

--l3WMZaaL8NpQWGnQ4mlU
Content-Transfer-Encoding: 8bit
Content-ID: <K9LB7k@example.org>
Content-Type: application/pkcs7-signature

[PKCS #7 signature here]

--l3WMZaaL8NpQWGnQ4mlU--


]]></artwork></figure>

<t>
The Local RLS completes the NOTIFY transaction.
</t>

<figure><artwork><![CDATA[
Local RLS -> RLS in example.org

SIP/2.0 200 OK
Via: SIP/2.0/TCP pres.example.org;branch=z9hG4bKmGL1nyZfQI
From: <sip:adam-friends@example.org>;tag=JenZ40P3
To: <sip:pres.example.com>;tag=a12eztNf
Call-ID: kBq5XhtZLN@pres.example.com
CSeq: 294444656 NOTIFY
Contact: <sip:pres.example.com>
Content-Length: 0


]]></artwork></figure>

<t>
At this point, the Local RLS decides it has collected 
enough additional information to warrant sending
a new notification to the user. Although sending
a full notification would be perfectly acceptable,
the RLS decides to send a partial notification
instead. The RLMI document contains only information
for the updated resources, as indicated by setting
the "fullState" parameter to "false".
  To avoid corrupting the S/MIME signature on the
  data received from the RLS in example.org, the
  local RLS copies the entire application/signed
  body as-is into the notification that it sends.
</t>

<figure><artwork><![CDATA[
Local RLS -> Terminal

NOTIFY sip:terminal.example.com SIP/2.0
Via: SIP/2.0/TCP pres.example.com;branch=z9hG4bK4EPlfSFQK1
Max-Forwards: 70
From: <sip:adam-buddies@pres.example.com>;tag=zpNctbZq
To: <sip:adam@example.com>;tag=ie4hbb8t
Call-ID: cdB34qLToC@terminal.example.com
CSeq: 997935769 NOTIFY
Contact: <sip:pres.example.com>
Event: presence
Subscription-State: active;expires=7200
Require: eventlist
Content-Type: multipart/related;type="application/rlmi+xml";
    start="<2BEI83@pres.example.com>";boundary="TfZxoxgAvLqgj4wRWPDL"
Content-Length: 2862

--TfZxoxgAvLqgj4wRWPDL
Content-Transfer-Encoding: 8bit
Content-ID: <2BEI83@pres.example.com>
Content-Type: application/rlmi+xml;charset="UTF-8"

<?xml version="1.0" encoding="UTF-8"?>
<list xmlns="urn:ietf:params:xml:ns:rmli"
      uri="sip:adam-friends@pres.example.com" version="2"
      name="Buddy List at COM" fullState="false">
  <resource uri="sip:ed@example.net" name="Ed at NET">
    <instance id="sdlkmeopdf" state="pending"/>
  </resource>
  <resource uri="sip:adam-friends@example.org" name="My Friends at ORG">
    <instance id="cmpqweitlp" state="active" cid="1KQhyE@pres.example.com"/>
  </resource>
</list>

--TfZxoxgAvLqgj4wRWPDL
Content-Transfer-Encoding: 8bit
Content-ID: <1KQhyE@pres.example.com>
Content-Type: multipart/signed;protocol="application/pkcs7-signature";
    micalg=sha1;boundary="l3WMZaaL8NpQWGnQ4mlU"

--l3WMZaaL8NpQWGnQ4mlU
Content-Transfer-Encoding: 8bit
Content-ID: <ZPvJHL@example.org>
Content-Type: multipart/related;type="application/rlmi+xml";
    start="<Cvjpeo@example.org>";boundary="tuLLl3lDyPZX0GMr2YOo"

--tuLLl3lDyPZX0GMr2YOo
Content-Transfer-Encoding: 8bit
Content-ID: <Cvjpeo@example.org>
Content-Type: application/rlmi+xml;charset="UTF-8"

<?xml version="1.0" encoding="UTF-8"?>
<list xmlns="urn:ietf:params:xml:ns:rmli"
      uri="sip:adam-friends@example.org" version="1"
      name="Buddy List at ORG" fullState="true">
  <resource uri="sip:joe@example.org" name="Joe Thomas">
    <instance id="1" state="active" cid="mrEakg@example.org"/>
  </resource>
  <resource uri="sip:mark@example.org" name="Mark Edwards">
    <instance id="1" state="active" cid="KKMDmv@example.org"/>
  </resource>
</list>

--tuLLl3lDyPZX0GMr2YOo
Content-Transfer-Encoding: 8bit
Content-ID: <mrEakg@example.org>
Content-Type: application/cpim-pidf+xml;charset="UTF-8"

<?xml version="1.0" encoding="UTF-8"?>
<presence xmlns="urn:ietf:params:xml:ns:cpim-pidf"
    entity="sip:joe@example.org">
  <tuple id="7823a4">
    <status>
      <basic>open</basic>
    </status>
    <contact priority="1.0">sip:joe@example.org</contact>
  </tuple>
</presence>

--tuLLl3lDyPZX0GMr2YOo
Content-Transfer-Encoding: 8bit
Content-ID: <KKMDmv@example.org>
Content-Type: application/cpim-pidf+xml;charset="UTF-8"

<?xml version="1.0" encoding="UTF-8"?>
<presence xmlns="urn:ietf:params:xml:ns:cpim-pidf"
    entity="sip:mark@example.org">
  <tuple id="398075">
    <status>
      <basic>closed</basic>
    </status>
  </tuple>
</presence>

--tuLLl3lDyPZX0GMr2YOo--

--l3WMZaaL8NpQWGnQ4mlU
Content-Transfer-Encoding: 8bit
Content-ID: <K9LB7k@example.org>
Content-Type: application/pkcs7-signature

[PKCS #7 signature here]

--l3WMZaaL8NpQWGnQ4mlU--

--TfZxoxgAvLqgj4wRWPDL--


]]></artwork></figure>

<t>
The terminal completes the NOTIFY transaction.
</t>

<figure><artwork><![CDATA[
Terminal -> Local RLS

SIP/2.0 200 OK
Via: SIP/2.0/TCP pres.example.com;branch=z9hG4bK4EPlfSFQK1
From: <sip:adam-buddies@pres.example.com>;tag=zpNctbZq
To: <sip:adam@example.com>;tag=ie4hbb8t
Call-ID: cdB34qLToC@terminal.example.com
CSeq: 997935769 NOTIFY
Contact: <sip:terminal.example.com>
Content-Length: 0

]]></artwork></figure>
</list>


</section>

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

<section title="Security Considerations">
<t>
  Note that the mechanisms for obtaining
  state information for resources in a list
  are generally left to the RLS implementor.
  Some of the security issues below are specific to
  the the circumstance that a SIP back-end
  subscription is used for such a purpose.

  Non-SIP mechanisms for
  obtaining state information of resources
  in a list will typically have
  their own security issues associated with
  doing so; however, exhaustively enumerating
  such access methods is not possible in
  this document. Implementors using such
  mechanisms must analyze their chosen access
  methods for relevant security issues.
</t>
<section title="Authentication">
<t>
   If back-end subscriptions are required to retrieve resource
   state information, the
   end user is no longer the direct subscriber to the state of
   the resource. If the notifier for the resource demands end-to-end
   authentication, the RLS will need to be provided 
   appropriate credentials to access those resources
   (e.g. shared secrets for Digest authentication). 

   This requires a
   certain level of trust between the user and their RLS. This
   specification does not describe any particular means of 
   providing such credentials to the RLS (such as uploading a
   shared secret).

   However, any such
   upload mechanism MUST ensure privacy of the key data; using HTTPS
   <xref target="RFC2818" /> to
   fill out a form is a reasonable method.
</t><t>
   If the notifier for the resource is using a transitive trust model
   to validate
   the subscriber, then this works well with the RLS concept and
   back-end subscriptions. The RLS
   would authenticate the subscriber, and then MAY use the SIP
   extensions for network asserted identity 
   <xref target="asserted-identity" />
   <xref target="sip-identity" />
   to provide an
   authenticated identity to the notifiers for the resource.
</t>
</section>

<section title="Risks of Improper Aggregation">
<t>
A resource list server typically serves information to multiple
subscribers at once. In many cases, resources may be present
in several lists; additionally, it is quite possible that
resource list servers will have two users subscribe to the
same list.
</t>
<t>
In these cases, misguided RLS implementations may attempt to
minimize network load by maintaining only one back-end
subscription to a resource in a list, and presenting the result of
such a subscription to more than one user. Of course, doing
so circumvents any authorization policy that the 
notifier for the resource
maintains. It is important to keep in mind that authorization
is often much more than a simple binary "allowed/not allowed"
decision; resources may render very different -- and even
conflicting -- resource states, depending on the identity
of the subscribing user.
</t>
<t>
Implementations MUST NOT attempt to perform this type
of optimization unless adequate access to complete
authorization policy can be guaranteed. Note that this is
a very difficult problem to solve correctly. Even
in the cases that such access is believed possible,
this mode of operation is NOT RECOMMENDED.
</t>
</section>

<section title="Signing and Sealing">
<t>
Implementors should keep in mind that any section of the
MIME body may be signed and/or encrypted as necessary.
Resource List Servers should take care not to modify
any MIME bodies they receive from any back-end subscriptions, and
should not generally rely on being able to read them.
</t>
<t>
In order to facilitate security, resource list servers
SHOULD pass along indication for
support of "multipart/signed" and "multipart/encrypted"
content types to any SIP back-end subscriptions, if
the subscriber includes them in the
initial SUBSCRIBE message. Not doing so may actually
result in resources refusing to divulge state (if
notifier policy requires encryption, but the RLS fails
to convey support), or subscribers discarding
valid state (if subscriber policy requires a signature,
but the RLS fails to convey support).
</t>
<t>
Note that actual implementation of encryption and signing
by the RLS is not necessary to be able to pass through
signed and/or encrypted bodies.
</t>
</section>

<section title="Infinite Loops">
<t>
One risk introduced by the ability to nest
resource lists is the possibility of creating
lists which ultimately contain themselves
as a sub-list. Detection and handling of
such a case is trivial when the RLS services
all of the virtual subscriptions internally.
When back-end subscriptions are created to
service virtual subscriptions, however,
detection of such situations becomes a more
difficult problem.
</t>
<t>
Implementors of RLSes that create back-end
subscriptions MUST implement safeguards
to prevent such nestings
from creating an infinite loop of subscriptions.
Typically, such mechanisms will require support
in the back-end subscription protocol. In particular,
applying filters to the back-end subscriptions
can be an effective way to preclude such problems.
</t>
</section>

</section>

<section title="IANA Considerations" anchor="iana">

<section title="New SIP Option Tag: eventlist">
<t>This section defines a new option tag for
the registry established by section 27.1 of
RFC 3261<xref target="RFC3261" />.  </t>
<list style="hanging">
  <t hangText="Option Tag Name:">eventlist</t>
  <t hangText="Description:">Extension to allow subscriptions to 
    lists of resources</t>
  <t hangText="Published specification:">RFC xxxx [[Note to RFC editor:
    replace xxxx with the RFC number of this document when published]]</t>
  </list>
</section>

<section title="New MIME type for Resource List Meta-Information">
<list style="hanging">
  <t hangText="MIME Media Type Name:">application</t>
  <t hangText="MIME subtype name:">rlmi+xml</t>
  <t hangText="Required parameters:">None</t>
  <t hangText="Optional parameters:">charset</t>
    <t>See 
       RFC 3023 <xref target="RFC3023" />
       for a discussion of the charset
       parameter on XML-derived MIME types. Since
       this MIME type is used exclusively in SIP,
       the use of UTF-8 encoding is strongly encouraged.</t>
  <t hangText="Encoding considerations:">8-bit text</t>
  <t hangText="Security considerations:">Security considerations
    specific to uses of this this MIME type are discussed in RFC xxxx 
    [[Note to RFC editor: replace xxxx with the RFC number of
    this document when published]]. 
    RFC 1874 <xref target="RFC1874" />
    and 
    RFC 3023 <xref target="RFC3023" />
    discuss security issues common to all uses of XML.</t>
  <t hangText="Interoperability considerations:">The use of
    this MIME body is intended to be generally interoperable. No
    unique considerations have been identified.</t>
  <t hangText="Published specification:">RFC xxxx [[Note to RFC editor:
    replace xxxx with the RFC number of this document when published]]</t>
  <t hangText="Applications which use this media type:">This
    media type is used to convey meta-information for the state of
    lists of resources within a Session Initiation
    Protocol (SIP) subscription.</t>
  <t hangText="Additional information:"></t>
  <list style="hanging">
    <t hangText="Magic Number(s):">None.</t>
    <t hangText="File Extension(s):">None.</t>
    <t hangText="Macintosh File Type Code(s):">None.</t>
    <t hangText="Object Identifier(s) or OID(s):">None.</t>
  </list>
  <t hangText="Intended usage:">Limited Use</t>
  <t hangText="Other Information/General Comment:">None.</t>
  <t hangText="Person to contact for further information:"></t>
  <list style="hanging">
    <t hangText="Name:">Adam Roach</t>
    <t hangText="E-Mail:">adam@dynamicsoft.com</t>
    <t hangText="Author/Change Controller:">
      The specification of this MIME type is a work product of
      the SIMPLE working group, and was authored by
      Adam Roach, Jonathan Rosenberg, and Ben Campbell. The
      IETF has change control over its specification.
    </t>
  </list>
</list>
</section>

<section title="URN Sub-Namespace">
<!-- see cpim for example -->

<list style="hanging">
  <t hangText="URI:">urn:ietf:params:xml:ns:rlmi</t>
  <t hangText="Description:">
      This is the XML namespace URI for XML elements defined by [RFCXXXX]
      to describe information about subscriptions when such
      subscriptions are aggregated within a single SIP
      subscription. It is used in the application/rlmi+xml
      body type.
  </t>
  <t hangText="Registrant Contact:"></t>
  <list style="hanging">
    <t hangText="Name:">Adam Roach</t>
    <t hangText="E-Mail:">adam@dynamicsoft.com</t>
    <t hangText="Author/Change Controller:">
      The specification of this MIME type is a work product of
      the SIMPLE working group, and was authored by
      Adam Roach, Jonathan Rosenberg, and Ben Campbell. The
      IETF has change control over its specification.
    </t>
  </list>
  <t hangText="XML:"></t>
  <figure>
  <artwork>
<![CDATA[
      BEGIN
        <?xml version="1.0"?>
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
                  "http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml">
        <head>
          <meta http-equiv="content-type"
             content="text/html;charset=utf-8"/>
          <title>Namespace for SIP Event Resource List 
                 Meta-Information</title>
        </head>
        <body>
          <h1>Namespace for SIP Event Resource List Meta-Information</h1>
          <h2>application/rlmi+xml</h2>
          <p>See <a href="[[[URL of published RFC]]]">RFCXXXX</a>.</p>
        </body>
        </html>
      END
]]></artwork>
  </figure>
</list>
</section>

</section>


<section title="Acknowledgements">
<t>Thanks to Sean Olson for a review of and corrections
to the usage of XML in this protocol.</t>
<t>
Thanks also to Hisham Khartabil, Paul Kyzivat, and Keith Drage
for their careful reviews of and comments on this document.
</t>
</section>

</middle>
<back>
<references title="Normative References">

<reference anchor='RFC3261'>
<front>
<title>SIP: Session Initiation Protocol</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'>
<organization /></author>
<author initials='H.' surname='Schulzrinne' fullname='H. Schulzrinne'>
<organization /></author>
<author initials='G.' surname='Camarillo' fullname='G. Camarillo'>
<organization /></author>
<author initials='A.' surname='Johnston' fullname='A. Johnston'>
<organization /></author>
<author initials='J.' surname='Peterson' fullname='J. Peterson'>
<organization /></author>
<author initials='R.' surname='Sparks' fullname='R. Sparks'>
<organization /></author>
<author initials='M.' surname='Handley' fullname='M. Handley'>
<organization /></author>
<author initials='E.' surname='Schooler' fullname='E. Schooler'>
<organization /></author>
<date month='June' year='2002' /></front>
<seriesInfo name='RFC' value='3261' />
<format type='TXT' octets='647976' target='ftp://ftp.isi.edu/in-notes/rfc3261.txt' />
</reference>

<reference anchor='RFC3265'>
<front>
<title>Session Initiation Protocol (SIP)-Specific Event Notification</title>
<author initials='A.B.' surname='Roach' fullname='A.B. Roach'>
<organization /></author>
<date month='June' year='2002' /></front>
<seriesInfo name='RFC' value='3265' />
<format type='TXT' octets='89005' target='ftp://ftp.isi.edu/in-notes/rfc3265.txt' />
</reference>



<reference anchor='RFC1521'>
<front>
<title abbrev='MIME'>MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies</title>
<author initials='N.S.' surname='Borenstein' fullname='Nathaniel S. Borenstein'>
<organization>Bellcore</organization>
<address>
<postal>
<street>445 South St.</street>
<street>MRE 2D-296</street>
<city>Morristown</city>
<region>NJ</region>
<code>07962-1910</code>
<country>US</country></postal>
<phone>+1 201 829 4270</phone>
<facsimile>+1 201 829 7019</facsimile>
<email>nsb@bellcore.com</email></address></author>
<author initials='N.' surname='Freed' fullname='Ned Freed'>
<organization>Innosoft International, Inc.</organization>
<address>
<postal>
<street>250 West First Street</street>
<street>Suite 240</street>
<city>Claremont</city>
<region>CA</region>
<code>91711</code>
<country>US</country></postal>
<phone>+1 909 624 7907</phone>
<facsimile>+1 909 621 5319</facsimile>
<email></email></address></author>
<date month='September' year='1993' />
</front>
<seriesInfo name='RFC' value='1521' />
<format type='TXT' octets='187424' target='ftp://ftp.isi.edu/in-notes/rfc1521.txt' />
<format type='PS' octets='393670' target='ftp://ftp.isi.edu/in-notes/rfc1521.ps' />
<format type='PDF' octets='205091' target='ftp://ftp.isi.edu/in-notes/rfc1521.pdf' />
</reference>


<reference anchor='RFC2387'>
<front>
<title abbrev='Multipart/Related'>The MIME Multipart/Related Content-type</title>
<author initials='E.' surname='Levinson' fullname='Edward Levinson'>
<organization />
<address>
<postal>
<street>47 Clive Street</street>
<street>Metuchen</street>
<street>NJ  08840-1060</street>
<country>USA</country></postal>
<phone>+1 908 494 1606</phone>
<email>XIson@cnj.digex.com</email></address></author>
<date month='August' year='1998' />
<area>Applications</area>
<keyword>content-type</keyword>
<keyword>multipurpose internet mail extensions</keyword>
<abstract>
<t>
   The Multipart/Related content-type provides a common mechanism for
   representing objects that are aggregates of related MIME body parts.
   This document defines the Multipart/Related content-type and provides
   examples of its use.
</t></abstract></front>
<seriesInfo name='RFC' value='2387' />
<format type='TXT' octets='18864' target='ftp://ftp.isi.edu/in-notes/rfc2387.txt' />
<format type='HTML' octets='34808' target='http://xml.resource.org/public/rfc/html/rfc2387.html' />
<format type='XML' octets='20549' target='http://xml.resource.org/public/rfc/xml/rfc2387.xml' />
</reference>

<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>-</email></address></author>
<date month='March' year='1997' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL
      NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,  &quot;MAY&quot;, and
      &quot;OPTIONAL&quot; in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
<format type='HTML' octets='15902' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5647' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>


</references>
<references title="Non-Normative References">

<reference anchor="presence">
<front>
<title>
A Presence Event Package for the Session Initiation Protocol (SIP)
</title>
<author initials="J" surname="Rosenberg" fullname="J.  Rosenberg">
    <organization />
</author>
<date month="January" day="31" year="2003" />
</front>
<seriesInfo name="Internet-Draft" value="draft-ietf-simple-presence-10" />
<format type="TXT"
        target="http://www.ietf.org/internet-drafts/draft-ietf-simple-presence-10.txt" />
</reference>

<!-- RFC 3325 -->
<reference anchor="asserted-identity">
<front>
<title>Private Extensions to the Session Initiation Protocol (SIP) for Asserted  Identity within Trusted Networks</title>
<author initials="C" surname="Jennings" fullname="C. Jennings">
    <organization />
</author>
<author initials="J" surname="Peterson" fullname="J Peterson">
    <organization />
</author>
<author initials="M" surname="Watson" fullname="M. Watson">
    <organization />
</author>
<date month="November" year="2002" />
</front>
<seriesInfo name='RFC' value='3325' />
<format type='TXT' target='ftp://ftp.isi.edu/in-notes/rfc3325.txt' />
</reference>

<reference anchor="sip-identity">
<front>
<title>Enhancements for Authenticated Identity Management in the Session  Initiation Protocol (SIP)</title>
<author initials="J" surname="Peterson" fullname="J. Peterson">
    <organization />
</author>
<date month="February" day="2" year="2003" />
</front>
<seriesInfo name="Internet-Draft" value="draft-ietf-sip-identity-01" />
<format type="TXT"
        target="http://www.ietf.org/internet-drafts/draft-ietf-sip-identity-01.txt" />
</reference>

<reference anchor="content-indirect">
<front>
<title>A Mechanism for Content Indirection in Session Initiation Protocol (SIP) Messages</title>
<author initials="S" surname="Olson" fullname="S. Olson">
<organization/>
</author>
<date month="February" day="27" year="2003" />
</front>
<seriesInfo name="Internet-Draft" value="draft-ietf-sip-content-indirect-mech-02" />
<format type="TXT"
        target="http://www.ietf.org/internet-drafts/draft-ietf-sip-content-indirect-mech-02.txt" />
</reference>

<reference anchor="cpp">
<front>
<title>Common Profile for Presence (CPP)</title>
<author initials="D" surname="Crocker" fullname="D. Crocker">
<organization/>
</author>
<author initials="J" surname="Peterson" fullname="J. Peterson">
<organization/>
</author>
<date month="February" day="28" year="2003" />
</front>
<seriesInfo name="Internet-Draft" value="draft-ietf-impp-pres-02" />
<format type="TXT"
        target="http://www.ietf.org/internet-drafts/draft-ietf-impp-pres-02.txt" />
</reference>

<reference anchor='RFC1874'>
<front>
<title>SGML Media Types</title>
<author initials='E.' surname='Levinson' fullname='Ed Levinson'>
<organization>Accurate Information Systems, Inc.</organization>
<address>
<postal>
<street>2 Industrial Way</street>
<city>Eatontown</city>
<region>NJ</region>
<code>07724</code>
<country>US</country></postal>
<email>ELevinson@Accurate.com</email></address></author>
<date month='December' year='1995' />
<abstract>
<t>This document proposes new media sub-types of Text/SGML and Application/SGML.  These media types can be used in the exchange of SGML documents and their entities.  Specific details for the exchange or encapsulation of groups of related SGML entities using MIME are currently being considered by the mimesgml Working Group sgml-internet@ebt.com.</t></abstract></front>
<seriesInfo name='RFC' value='1874' />
<format type='TXT' octets='12515' target='ftp://ftp.isi.edu/in-notes/rfc1874.txt' />
</reference>


<reference anchor='RFC3023'>
<front>
<title>XML Media Types</title>
<author initials='M.' surname='Murata' fullname='M. Murata'>
<organization /></author>
<author initials='S.' surname='St. Laurent' fullname='S. St. Laurent'>
<organization /></author>
<author initials='D.' surname='Kohn' fullname='D. Kohn'>
<organization /></author>
<date month='January' year='2001' /></front>
<seriesInfo name='RFC' value='3023' />
<format type='TXT' octets='86011' target='ftp://ftp.isi.edu/in-notes/rfc3023.txt' />
</reference>


<reference anchor='RFC2633'>
<front>
<title>S/MIME Version 3 Message Specification</title>
<author initials='B.' surname='Ramsdell' fullname='Blake Ramsdell'>
<organization>Worldtalk</organization>
<address>
<postal>
<street>17720 NE 65th Street</street>
<street>Suite 201</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code>
<country>US</country></postal>
<phone>+1 425 376 0225</phone>
<email>blaker@deming.com</email></address></author>
<date month='June' year='1999' /></front>
<seriesInfo name='RFC' value='2633' />
<format type='TXT' octets='67870' target='ftp://ftp.isi.edu/in-notes/rfc2633.txt' />
</reference>

<reference anchor='RFC1847'>
<front>
<title abbrev='Security Multiparts'>Security Multiparts for MIME: Multipart/Signed and Multipart/Encrypted</title>
<author initials='J.' surname='Galvin' fullname='Jim Galvin'>
<organization>Trusted Information Systems</organization>
<address>
<postal>
<street>3060 Washington Road</street>
<city>Glenwood</city>
<region>MD</region>
<code>21738</code>
<country>US</country></postal>
<phone>+1 301 854 6889</phone>
<facsimile>+1 301 854 5363</facsimile>
<email>galvin@tis.com</email></address></author>
<author initials='S.' surname='Murphy' fullname='Sandy Murphy'>
<organization>Trusted Information Systems</organization>
<address>
<postal>
<street>3060 Washington Road</street>
<city>Glenwood</city>
<region>MD</region>
<code>21738</code>
<country>US</country></postal>
<phone>+1 301 854 6889</phone>
<facsimile>+1 301 854 5363</facsimile>
<email>sandy@tis.com</email></address></author>
<author initials='S.' surname='Crocker' fullname='Steve Crocker'>
<organization>CyberCash, Inc.</organization>
<address>
<postal>
<street>2086 Hunters Crest Way</street>
<city>Vienna</city>
<region>VA</region>
<code>22181</code>
<country>US</country></postal>
<phone>+1 703 620 1222</phone>
<facsimile>+1 703 391 2651</facsimile>
<email>crocker@cybercash.com</email></address></author>
<author initials='N.' surname='Freed' fullname='Ned Freed'>
<organization>Innosoft International, Inc.</organization>
<address>
<postal>
<street>1050 East Garvey Avenue South</street>
<city>West Covina</city>
<region>CA</region>
<code>91790</code>
<country>US</country></postal>
<phone>+1 818 919 3600</phone>
<facsimile>+1 818 919 3614</facsimile>
<email>ned@innosoft.com</email></address></author>
<date month='October' year='1995' />
<abstract>
<t>This document defines a framework within which security services may be applied to MIME body parts.  MIME, an acronym for "Multipurpose Internet Mail Extensions", defines the format of the contents of Internet mail messages and provides for multi-part textual and non-textual message bodies.  The new content types are subtypes of multipart: signed and encrypted.  Each will contain two body parts: one for the protected data and one for the control information necessary to remove the protection.  The type and contents of the control information body parts are determined by the value of the protocol parameter of the enclosing multipart/signed or multipart/encrypted content type, which is required to be present.</t></abstract></front>
<seriesInfo name='RFC' value='1847' />
<format type='TXT' octets='23679' target='ftp://ftp.isi.edu/in-notes/rfc1847.txt' />
</reference>


<reference anchor='RFC2818'>
<front>
<title>HTTP Over TLS</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<date month='May' year='2000' /></front>
<seriesInfo name='RFC' value='2818' />
<format type='TXT' octets='15170' target='ftp://ftp.isi.edu/in-notes/rfc2818.txt' />
</reference>

<!-- ?rfc include='reference.RFC.3261'? -->

</references>

<section title="Changes">
<t>Note that this section will be removed before publication as
an RFC.</t>
<section title="Changes since -02">
<list style="symbols">
<t>
Added discussion in security section about infinite
loops.
</t>
<t>
Fixed several places where the document said "one or more"
instead of "zero or more", when referring
to the number of resources that can appear in a list and
the number of instances that can appear in a resource.
</t>
<t>
Tiny editorial cleanup (mostly spelling gaffes).
</t>
</list>
</section>

<section title="Changes since -01">
<list style="symbols">
<t>
Several editorial updates. Change "collection" to "list"
everywhere.
</t>
<t>
Added terminology section.
</t>
<t>
Added restriction that cid attributes can only point to
documents at the same level as the RLMI document in
which they appear.
</t>
<t>
Clarified description of how to construct resource
state by splitting discussion of full state
notifications apart from discussion of partial-state
notifications.
</t>
</list>
</section>

<section title="Changes since -00">

<list style="symbols">
<t>
  Removed text in several places which went into detail about
  specific implementations which used SIP SUB/NOT
  for back-end subscriptions. Some of this text will probably
  be published later as part of an implementors' guide.
</t>
<t>
  Removed specific semantics for "Event" header field
  parameters and SUBSCRIBE bodies. These will
  be defined on a per-package basis, probably
  by the filtering work.
</t>
<t>
  Added "cid" attribute to &lt;list> elements.
</t>
<t>
  Reworked XML schema definition for meta-information.
</t>
<t>
  Added IANA registration for XML namespace.
</t>
<t>
  Minor editorial fixes
</t>
</list>

</section>

</section>

<section title="Intellectual Property Statement">
<t>
     The IETF takes no position regarding the validity or scope of any
     intellectual property or other rights that might be claimed to
     pertain to the implementation or use of the technology
 described in
     this document or the extent to which any license under such rights
     might or might not be available; neither does it represent that it
     has made any effort to identify any such rights.
</t><t>
 Information on the
     IETF's procedures with respect to rights in standards-track and
     standards-related documentation can be found in BCP-11.  Copies of
     claims of rights made available for publication and any
 assurances of
     licenses to be made available, or the result of an attempt made to
     obtain a general license or permission for the use of such
     proprietary rights by implementors or users of this
 specification can
     be obtained from the IETF Secretariat.
</t><t>
     The IETF invites any interested party to bring to its
 attention any
     copyrights, patents or patent applications, or other proprietary
     rights which may cover technology that may be required to practice
     this standard.  Please address the information to the
 IETF Executive
     Director.
</t>
</section>

</back>
</rfc>
